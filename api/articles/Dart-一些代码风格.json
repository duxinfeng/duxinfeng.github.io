{"title":"Dart 一些代码风格","uid":"a688f4b322147f4a3c7e82350c7f148d","slug":"Dart-一些代码风格","date":"2021-11-10T06:38:41.000Z","updated":"2021-11-24T16:56:50.040Z","comments":true,"path":"api/articles/Dart-一些代码风格.json","keywords":null,"cover":"http://qiniu.niuxtech.cn/2022/blog_placeholder_004.jpg","content":"<h3 id=\"UpperCamelCase\"><a href=\"#UpperCamelCase\" class=\"headerlink\" title=\"UpperCamelCase\"></a>UpperCamelCase</h3><p>每个单词的首字母都大写，包含第一个单词。<strong>用于 Classes（类名）、 enums（枚举类型）、 typedefs（类型定义）、以及 type parameters（类型参数）</strong>应该把每个单词的首字母都大写（包含第一个单词），不使用分隔符。与类型命名一样，<a href=\"https://dart.cn/guides/language/extension-methods\">扩展</a> 的名称也应大写每个单词的首字母（包括第一个单词），并且不使用分隔符。</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">class SliderMenu &#123; ... &#125;\n\nclass HttpRequest &#123; ... &#125;\n\ntypedef Predicate&lt;T> = bool Function(T value);\n\nextension MyFancyList&lt;T> on List&lt;T> &#123; ... &#125;\n\nextension SmartIterable&lt;T> on Iterable&lt;T> &#123; ... &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"lowercase-with-underscores\"><a href=\"#lowercase-with-underscores\" class=\"headerlink\" title=\"lowercase_with_underscores\"></a>lowercase_with_underscores</h3><p>除了第一个字母始终是小写（即使是缩略词），每个单词的首字母都大写。<strong>在库，package，文件夹，源文件</strong> 中使用 lowercase_with_underscores 方式命名。</p>\n<p>一些文件系统不区分大小写，所以很多项目要求文件名必须是小写字母。使用分隔符这种形式可以保证命名的可读性。</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">library peg_parser.source_scanner;\n\nimport 'file_system.dart';\nimport 'slider_menu.dart';\n\n\nimport 'dart:math' as math;\nimport 'package:angular_components/angular_components'\n    as angular_components;\nimport 'package:js/js.dart' as js;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"lowerCamelCase\"><a href=\"#lowerCamelCase\" class=\"headerlink\" title=\"lowerCamelCase\"></a>lowerCamelCase</h3><p>只是用小写字母单词，即使是缩略词，并且单词之间使用 _ 连接。<strong>类成员、顶级定义、变量、参数</strong>以及命名参数等 <em>除了</em>第一个单词，每个单词首字母都应大写，并且不使用分隔符。</p>\n<p>在新的代码中，使用 lowerCamelCase 来命名常量，包括枚举的值。</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">var count = 3;\n\nHttpRequest httpRequest;\n\nvoid align(bool clearItems) &#123;\n  // ...\n&#125;\n\nconst pi = 3.14;\nconst defaultTimeout = 1000;\nfinal urlScheme = RegExp('^([a-z]+):');\n\nclass Dice &#123;\n  static final numberGenerator = Random();\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"Dart-引入包声明顺序\"><a href=\"#Dart-引入包声明顺序\" class=\"headerlink\" title=\"Dart 引入包声明顺序\"></a>Dart 引入包声明顺序</h3><ol>\n<li>把 “dart:” 导入语句放到其他导入语句之前。</li>\n<li>“package:” 导入语句放到项目相关导入语句之前。</li>\n<li>（export）语句作为一个单独的部分放到所有导入语句之后。</li>\n<li>按照字母顺序来排序每个部分中的语句。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#39;dart:async&#39;;\nimport &#39;dart:html&#39;;\n\nimport &#39;package:bar&#x2F;bar.dart&#39;;\nimport &#39;package:foo&#x2F;foo.dart&#39;;\n\nimport &#39;util.dart&#39;;\n\nexport &#39;src&#x2F;error.dart&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用 dart format 格式化你的代码。</p>\n<h2 id=\"If-语句\"><a href=\"#If-语句\" class=\"headerlink\" title=\"If 语句\"></a>If 语句</h2><p>一个没有 else 的 if 语句，并且这个 if 语句以及它的执行体适合在一行中实现。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if (arg &#x3D;&#x3D; null) return defaultValue;\n\n或\n\nif (overflowChars !&#x3D; other.overflowChars) &#123;\n  return overflowChars &lt; other.overflowChars;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"UpperCamelCase每个单词的首字母都大写，包含第一个单词。用于 Classes（类名）、 enums（枚举类型）、 typedefs（类型定义）、以及 type parameters（类型参数）应该把每个单词的首字母都大写（包含第一个单词），不使用分隔符。与类型命名一样...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Dart","slug":"Dart","count":1,"path":"api/tags/Dart.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UpperCamelCase\"><span class=\"toc-text\">UpperCamelCase</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lowercase-with-underscores\"><span class=\"toc-text\">lowercase_with_underscores</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lowerCamelCase\"><span class=\"toc-text\">lowerCamelCase</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Dart-%E5%BC%95%E5%85%A5%E5%8C%85%E5%A3%B0%E6%98%8E%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">Dart 引入包声明顺序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#If-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">If 语句</span></a>","author":{"name":"新风作浪","slug":"blog-author","avatar":"http://qiniu.niuxtech.cn/avatar.png","link":"/","description":"专注于你能控制的","socials":{"github":"https://github.com/duxinfeng","twitter":"https://twitter.com/iduxinfeng","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/duxinfeng2010","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"替换Ruby Gems 默认源","uid":"0a9a725d0b52f14dcaf6289995b37e94","slug":"替换Ruby-Gems-默认源","date":"2021-11-19T02:42:16.000Z","updated":"2021-11-19T03:44:01.758Z","comments":true,"path":"api/articles/替换Ruby-Gems-默认源.json","keywords":null,"cover":"http://qiniu.niuxtech.cn/2022/blog_placeholder_001.jpg","text":"经常因为网络问题，执行 sudo gem update –system 报错 ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) Errno::ECONNREFUSED: Failed to open T...","link":"","photos":[],"count_time":{"symbolsCount":560,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Gem","slug":"Gem","count":1,"path":"api/tags/Gem.json"}],"author":{"name":"新风作浪","slug":"blog-author","avatar":"http://qiniu.niuxtech.cn/avatar.png","link":"/","description":"专注于你能控制的","socials":{"github":"https://github.com/duxinfeng","twitter":"https://twitter.com/iduxinfeng","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/duxinfeng2010","juejin":"","customs":{}}}},"next_post":{"title":"开始工作前摸会儿鱼","uid":"3f0ec780417cd63440690ea6ac0a1d95","slug":"开始工作前摸会儿鱼","date":"2021-08-12T03:05:37.000Z","updated":"2021-11-24T16:53:32.857Z","comments":true,"path":"api/articles/开始工作前摸会儿鱼.json","keywords":null,"cover":"http://qiniu.niuxtech.cn/2022/20210812232922.jpeg","text":"去年一年迭代节奏很快了，上班也很少有时间摸鱼。早上连上 Wifi 打卡后，就开始打开电脑写BUG，然后改BUG。日复一日，年复一年的没有什么长进。 也有意识到这一个问题，然后还是希望工作上能证明一些什么，能做出更多的成果，但是最终结果也没有那么理想。我需要换个不一样不开始，搅一下...","link":"","photos":[],"count_time":{"symbolsCount":948,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"生活","slug":"生活","count":2,"path":"api/tags/生活.json"}],"author":{"name":"新风作浪","slug":"blog-author","avatar":"http://qiniu.niuxtech.cn/avatar.png","link":"/","description":"专注于你能控制的","socials":{"github":"https://github.com/duxinfeng","twitter":"https://twitter.com/iduxinfeng","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/duxinfeng2010","juejin":"","customs":{}}}}}